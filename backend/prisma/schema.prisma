// This is the Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// Contient les utilisateurs inscrits, avec leurs infos de profil et stats
model User {
	id            Int       @id @default(autoincrement())
	email         String    @unique
	passwordHash  String
	displayName   String    @unique
	avatarUrl     String    @default("/avatars/default.png")
	isOnline      Boolean   @default(false)
	wins          Int       @default(0)
	losses        Int       @default(0)
	createdAt     DateTime  @default(now())
	updatedAt     DateTime  @updatedAt

	// Relations
	following     Friend[]  @relation("Following")
	followers     Friend[]  @relation("Followers")
	wonTournaments Tournament[] @relation("TournamentWinner")
	matchesAsPlayer1 Match[] @relation("Player1")
	matchesAsPlayer2 Match[] @relation("Player2")
	wonMatches    Match[]   @relation("MatchWinner")

	@@map("users")
}

/// Relation d'amitié bidirectionnelle entre utilisateurs
model Friend {
	user        User      @relation("Following", fields: [userId], references: [id])
	userId      Int
	friend      User      @relation("Followers", fields: [friendId], references: [id])
	friendId    Int
	createdAt   DateTime  @default(now())

	@@id([userId, friendId])

	@@map("friends")
}

/// Liste des jeux disponibles (ex : Pong, etc.)
model Game {
	id          Int       @id @default(autoincrement())
	name        String    @unique
	description String?

	// Relations
	tournaments Tournament[]
	matches     Match[]

	@@map("games")
}

/// Représente un tournoi pour un jeu donné
model Tournament {
	id        Int       @id @default(autoincrement())
	name      String
	game      Game      @relation(fields: [gameId], references: [id])
	gameId    Int
	createdAt DateTime  @default(now())
	finished  Boolean   @default(false)
	winner    User?     @relation("TournamentWinner", fields: [winnerId], references: [id])
	winnerId  Int?
	startedAt DateTime?
	endedAt   DateTime?

	// Relations
	matches   Match[]

	@@map("tournaments")
}

/// Historique des matchs 1v1
model Match {
	id              Int         @id @default(autoincrement())
	game           Game        @relation(fields: [gameId], references: [id])
	gameId         Int
	tournament     Tournament? @relation(fields: [tournamentId], references: [id])
	tournamentId   Int?
	player1        User        @relation("Player1", fields: [player1Id], references: [id])
	player1Id      Int
	player2        User        @relation("Player2", fields: [player2Id], references: [id])
	player2Id      Int
	winner         User?       @relation("MatchWinner", fields: [winnerId], references: [id])
	winnerId       Int?
	scoreP1        Int			@default(0)
	scoreP2        Int			@default(0)
	winnerToMatch  Match?      @relation("WinnerNextMatch", fields: [winnerToMatchId], references: [id])
	winnerToMatchId Int?
	loserToMatch   Match?      @relation("LoserNextMatch", fields: [loserToMatchId], references: [id])
	loserToMatchId  Int?
	startedAt      DateTime?
	endedAt        DateTime?

	// Relations inverses pour les matchs suivants
	previousWinnerMatches Match[] @relation("WinnerNextMatch")
	previousLoserMatches  Match[] @relation("LoserNextMatch")

	@@map("matches")
}